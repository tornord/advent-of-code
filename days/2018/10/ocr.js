import { groupBy, newMatrix } from "../../../common";

const { floor } = Math;

const t1 = `
#####...#....#.....###..#....#.....###....##....######..#....#
#....#..#....#......#...#....#......#....#..#...#.......#....#
#....#...#..#.......#....#..#.......#...#....#..#........#..#.
#....#...#..#.......#....#..#.......#...#....#..#........#..#.
#####.....##........#.....##........#...#....#..#####.....##..
#....#....##........#.....##........#...######..#.........##..
#....#...#..#.......#....#..#.......#...#....#..#........#..#.
#....#...#..#...#...#....#..#...#...#...#....#..#........#..#.
#....#..#....#..#...#...#....#..#...#...#....#..#.......#....#
#####...#....#...###....#....#...###....#....#..######..#....#
`;
const t2 = `
.####...######..#....#..#....#...####....####....####...#....#
#....#..#.......##...#..#...#...#....#..#....#..#....#..#....#
#.......#.......##...#..#..#....#.......#.......#.......#....#
#.......#.......#.#..#..#.#.....#.......#.......#.......#....#
#.......#####...#.#..#..##......#.......#.......#.......######
#..###..#.......#..#.#..##......#.......#..###..#..###..#....#
#....#..#.......#..#.#..#.#.....#.......#....#..#....#..#....#
#....#..#.......#...##..#..#....#.......#....#..#....#..#....#
#...##..#.......#...##..#...#...#....#..#...##..#...##..#....#
.###.#..#.......#....#..#....#...####....###.#...###.#..#....#
`;
const t3 = `
######..#....#....##....######..#####...######..#....#..#####.
#.......#....#...#..#........#..#....#.......#..#....#..#....#
#.......#....#..#....#.......#..#....#.......#..#....#..#....#
#.......#....#..#....#......#...#....#......#...#....#..#....#
#####...######..#....#.....#....#####......#....######..#####.
#.......#....#..######....#.....#.........#.....#....#..#.....
#.......#....#..#....#...#......#........#......#....#..#.....
#.......#....#..#....#..#.......#.......#.......#....#..#.....
#.......#....#..#....#..#.......#.......#.......#....#..#.....
######..#....#..#....#..######..#.......######..#....#..#.....
`;
const t4 = `
#####....####...#####...#....#..#....#..#....#..#....#....##..
#....#..#....#..#....#..#...#...#....#..#...#...##...#...#..#.
#....#..#.......#....#..#..#....#....#..#..#....##...#..#....#
#....#..#.......#....#..#.#.....#....#..#.#.....#.#..#..#....#
#####...#.......#####...##......######..##......#.#..#..#....#
#..#....#..###..#..#....##......#....#..##......#..#.#..######
#...#...#....#..#...#...#.#.....#....#..#.#.....#..#.#..#....#
#...#...#....#..#...#...#..#....#....#..#..#....#...##..#....#
#....#..#...##..#....#..#...#...#....#..#...#...#...##..#....#
#....#...###.#..#....#..#....#..#....#..#....#..#....#..#....#
`;
const t5 = `
#####...#.......#####...#####....####...######..#####...#####.
#....#..#.......#....#..#....#..#....#..#.......#....#..#....#
#....#..#.......#....#..#....#..#.......#.......#....#..#....#
#....#..#.......#....#..#....#..#.......#.......#....#..#....#
#####...#.......#####...#####...#.......#####...#####...#####.
#.......#.......#....#..#.......#..###..#.......#..#....#..#..
#.......#.......#....#..#.......#....#..#.......#...#...#...#.
#.......#.......#....#..#.......#....#..#.......#...#...#...#.
#.......#.......#....#..#.......#...##..#.......#....#..#....#
#.......######..#####...#........###.#..#.......#....#..#....#
`;
// eslint-disable-next-line no-unused-vars
const t6 = `
#....#.....###..#####......###..#....#..#####.....##....######
#....#......#...#....#......#...#....#..#....#...#..#........#
#....#......#...#....#......#....#..#...#....#..#....#.......#
#....#......#...#....#......#....#..#...#....#..#....#......#.
######......#...#####.......#.....##....#####...#....#.....#..
#....#......#...#....#......#.....##....#..#....######....#...
#....#......#...#....#......#....#..#...#...#...#....#...#....
#....#..#...#...#....#..#...#....#..#...#...#...#....#..#.....
#....#..#...#...#....#..#...#...#....#..#....#..#....#..#.....
#....#...###....#####....###....#....#..#....#..#....#..######
`;
// eslint-disable-next-line no-unused-vars
const t7 = `
######..#####...#....#..#....#..#.......######....##.....####.
#.......#....#..#....#..#...#...#.......#........#..#...#....#
#.......#....#..#....#..#..#....#.......#.......#....#..#.....
#.......#....#..#....#..#.#.....#.......#.......#....#..#.....
#####...#####...######..##......#.......#####...#....#..#.....
#.......#....#..#....#..##......#.......#.......######..#..###
#.......#....#..#....#..#.#.....#.......#.......#....#..#....#
#.......#....#..#....#..#..#....#.......#.......#....#..#....#
#.......#....#..#....#..#...#...#.......#.......#....#..#...##
#.......#####...#....#..#....#..######..######..#....#...###.#
`;

function scanChars(text, start, end) {
  const lines = text.trim().split("\n");
  let res = [];
  for (let i = 0; i < lines[0].length; i += 8) {
    res.push(lines.map((r) => r.slice(i, i + 6)));
  }
  if (typeof start === "number" && typeof end === "number") {
    res = res.slice(start, end);
  }
  return res;
}

const CHAR_IMAGE = `
..##....#####....####...######..######...####...#....#.....###..#....#..#.......#....#..#####...#####...#....#..######
.#..#...#....#..#....#..#.......#.......#....#..#....#......#...#...#...#.......##...#..#....#..#....#..#....#.......#
#....#..#....#..#.......#.......#.......#.......#....#......#...#..#....#.......##...#..#....#..#....#...#..#........#
#....#..#....#..#.......#.......#.......#.......#....#......#...#.#.....#.......#.#..#..#....#..#....#...#..#.......#.
#....#..#####...#.......#####...#####...#.......######......#...##......#.......#.#..#..#####...#####.....##.......#..
######..#....#..#.......#.......#.......#..###..#....#......#...##......#.......#..#.#..#.......#..#......##......#...
#....#..#....#..#.......#.......#.......#....#..#....#......#...#.#.....#.......#..#.#..#.......#...#....#..#....#....
#....#..#....#..#.......#.......#.......#....#..#....#..#...#...#..#....#.......#...##..#.......#...#....#..#...#.....
#....#..#....#..#....#..#.......#.......#...##..#....#..#...#...#...#...#.......#...##..#.......#....#..#....#..#.....
#....#..#####....####...######..#........###.#..#....#...###....#....#..######..#....#..#.......#....#..#....#..######
`;
const LETTERS = "ABCEFGHJKLNPRXZ";
const SAMPLE_PIXELS = [
  [5, 1],
  [1, 4],
  [2, 4],
  [5, 6],
  [5, 9],
];

// eslint-disable-next-line no-unused-vars
function createCharImage() {
  const recognizedLetters = "BXJAEGFNKCHZPRL";
  let cs = [...[t1, t2, t3, t4, t5].map((t) => scanChars(t))].flat();
  cs = Object.values(groupBy(cs, (c) => c.join("\n")))
    .map((g) => g[0])
    .map((c, i) => ({ char: recognizedLetters[i], image: c }))
    .sort((a, b) => a.char.localeCompare(b.char));
  const charImage = newMatrix(10, 8 * cs.length - 2, () => ".");
  for (let i = 0; i < cs.length; i++) {
    const c = cs[i];
    for (let y = 0; y < c.image.length; y++) {
      for (let x = 0; x < c.image[y].length; x++) {
        charImage[y][8 * i + x] = c.image[y][x];
      }
    }
  }
  for (let i = 0; i < charImage.length; i++) {
    // eslint-disable-next-line no-console
    console.log(charImage[i].join(""));
  }
  // eslint-disable-next-line no-console
  console.log(cs.map((c) => c.char).join(""));
}

// eslint-disable-next-line no-unused-vars
function createSamplePixels() {
  const cs = scanChars(CHAR_IMAGE).map((c, i) => ({ char: LETTERS[i], image: c }));
  const pixels = [];
  for (let i = 0; i < 6 * 10; i++) {
    const x = i % 6;
    const y = floor(i / 6);
    const ps = cs.map((c) => c.image[y][x]).join("");
    if (ps === "".padStart(ps.length, ".") || ps === "".padStart(ps.length, "#")) continue;
    pixels.push([i, x, y, ps]);
  }
  let ks = [];
  let ok = null;
  while (ok !== true) {
    const samplePixels = [];
    for (let i = 0; i < 5; i++) {
      samplePixels.push(pixels[floor(Math.random() * pixels.length)]);
    }
    ks = [];
    for (let i = 0; i < cs.length; i++) {
      const k = samplePixels.map(([x, y]) => cs[i].image[y][x]).join("");
      ks.push(k);
    }
    const ns = groupBy(
      ks,
      (d) => d,
      (d, i) => i
    );
    ok = Object.values(ns).every((d) => d.length === 1);
    if (ok) {
      // eslint-disable-next-line no-console
      console.log(
        JSON.stringify(
          samplePixels
            .map(([, x, y]) => [x, y])
            .sort((a, b) => {
              const c = a[1] - b[1];
              if (c !== 0) return c;
              return a[0] - b[0];
            })
        )
      );
    }
  }
  return ok;
}

export function ocr(image, startX) {
  const cs = scanChars(CHAR_IMAGE).map((c, i) => ({ char: LETTERS[i], image: c }));
  const samplePixels = SAMPLE_PIXELS.map((d, i) => [i, ...d]);
  const keys = cs.map((c) => samplePixels.map(([, x, y]) => c.image[y][x]).join(""));
  const ocrDict = groupBy(
    keys,
    (d) => d,
    (d, i) => i
  );
  for (const k of Object.keys(ocrDict)) {
    const v = ocrDict[k];
    ocrDict[k] = cs[v[0]].char;
  }
  const k = samplePixels.map(([, x, y]) => image[y][startX + x]).join("");
  return ocrDict[k];
}
// console.log(ocr(scanChars(CHAR_IMAGE)[0], 0));
// createCharImage();
// createSamplePixels();
